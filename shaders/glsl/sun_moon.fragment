// __multiversion__
// This signals the loading code to prepend either #version 100 or #version 300 es as apropriate.

#include "fragmentVersionCentroid.h"

#if __VERSION__ >= 300

#if defined(TEXEL_AA) && defined(TEXEL_AA_FEATURE)
_centroid in highp vec2 uv;
#else
_centroid in vec2 uv;
#endif

#else

varying vec2 uv;

#endif

#include "uniformShaderConstants.h"
#include "util.h"

varying POS4 vpos;
varying POS3 pos;

LAYOUT_BINDING(0) uniform sampler2D TEXTURE_0;

uniform vec4 FOG_COLOR;
uniform vec2 FOG_CONTROL;
uniform float RENDER_DISTANCE;

float noise(float t)
{
	return fract(cos(t) * 3800.);
}

vec3 lensflare(vec2 u,vec2 pos)
{
	vec2 main = u-pos;
	vec2 uvd = u*(length(u));
	
	float ang = atan(main.y, main.x);
	float dist=length(u); //main
  dist = pow(dist,.01);
	float n = noise(0.);
	
	float f0 = (1.0/(length(u-12.)*16.0+1.0)) * 2.;
	
	f0 = f0*(sin((n*2.0)*12.0)*.1+dist*.1+.8);

	float f2 = max(1.0/(1.0+32.0*pow(length(uvd+0.8*pos),2.0)),.0)*00.25;
	float f22 = max(1.0/(1.0+32.0*pow(length(uvd+0.85*pos),2.0)),.0)*00.23;
	float f23 = max(1.0/(1.0+32.0*pow(length(uvd+0.9*pos),2.0)),.0)*00.21;
	
	vec2 uvx = mix(u,uvd,-0.5);
	
	float f4 = max(0.01-pow(length(uvx+0.45*pos),2.4),.0)*6.0;
	float f42 = max(0.01-pow(length(uvx+0.5*pos),2.4),.0)*5.0;
	float f43 = max(0.01-pow(length(uvx+0.55*pos),2.4),.0)*3.0;
	
	uvx = mix(u,uvd,-.4);
	
	float f5 = max(0.01-pow(length(uvx+0.3*pos),5.5),.0)*2.0;
	float f52 = max(0.01-pow(length(uvx+0.5*pos),5.5),.0)*2.0;
	float f53 = max(0.01-pow(length(uvx+0.7*pos),5.5),.0)*2.0;
	
	uvx = mix(u,uvd,-0.5);
	
	float f6 = max(0.01-pow(length(uvx+0.1*pos),1.6),.0)*6.0;
	float f62 = max(0.01-pow(length(uvx+0.125*pos),1.6),.0)*3.0;
	float f63 = max(0.01-pow(length(uvx+0.15*pos),1.6),.0)*5.0;
	
	vec3 c = vec3(.0);
	c.r+=f2+f4+f5+f6; 
  c.g+=f22+f42+f52+f62; 
  c.b+=f23+f43+f53+f63;
	c+=vec3(f0);
	
	return c;
}

vec3 cc(vec3 color, float factor,float factor2) // color modifier
{
	float w = color.x+color.y+color.z;
	return mix(color,vec3(w)*factor,w*factor2);
}

void main()
{
#if !defined(TEXEL_AA) || !defined(TEXEL_AA_FEATURE)
	vec4 diffuse = texture2D( TEXTURE_0, fract( uv * 5. ) );
#else
	vec4 diffuse = texture2D_AA(TEXTURE_0, fract( uv * 5. ) );
#endif

#ifdef ALPHA_TEST
	if(diffuse.a < 0.5)
		discard;
#endif

float lp = length(-pos);
vec4 fc = FOG_COLOR;
float hujan = (1.0-pow(FOG_CONTROL.y,11.0));
float sore = pow(max(min(1.0-fc.b*1.2,1.0),0.0),0.5);

float area = (.1 -clamp(lp, .0, .1)) * 10.;
diffuse = mix( vec4( .0 ), diffuse, area);

  fc.rgb = max(fc.rgb, .4);
  fc.a *= 1. -hujan;
  diffuse.a = min(fc.a, .5);
  area = .2 -clamp( length(-pos) / RENDER_DISTANCE * 200., 0., .2 );
  vec3 af = mix( vec3( 1. ), vec3( 1., .5, 0. ), sore ) * area;
  vec2 u = -vpos.xz * .1;
  vec3 c = vec3( 1.4, 1.2, 1. ) * lensflare( pos.xz * 13., u ) * 2.;
  c = cc(c,.5,.1) * .5;
  diffuse.rgb += c + af;
  diffuse.a += length(c) * fc.a;

	gl_FragColor = clamp( diffuse - .05, 0., 1. );
}
